/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package blain.cset4250_final_project;

import java.io.*;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import javax.swing.JTable;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import com.opencsv.CSVReader;
import java.math.RoundingMode;
import java.util.HashSet;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.text.DecimalFormat;
import javax.swing.BorderFactory;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;

/**
 *
 * @author bahls
 */
public class MainPage extends javax.swing.JFrame {

    /**
     * Creates new form MainPage
     *
     * @throws java.io.IOException
     */
    public MainPage() throws IOException {
        NewInitComponents();
    }

    public Object[][] getTableData(JTable table) {
        DefaultTableModel dtm = (DefaultTableModel) table.getModel();
        int nRow = dtm.getRowCount(), nCol = dtm.getColumnCount();
        Object[][] tableData = new Object[nRow][nCol];
        for (int i = 0; i < nRow; i++) {
            for (int j = 0; j < nCol; j++) {
                tableData[i][j] = dtm.getValueAt(i, j);
            }
        }
        return tableData;
    }

    public static void exportToCSV(JTable table, String path) {
        try {
            TableModel model = table.getModel();
            FileWriter csv = new FileWriter(new File(path));

            for (int i = 0; i < model.getColumnCount(); i++) {
                csv.write(model.getColumnName(i) + ",");
            }

            csv.write("\n");

            for (int i = 0; i < model.getRowCount(); i++) {
                for (int j = 0; j < model.getColumnCount(); j++) {
                    csv.write(model.getValueAt(i, j).toString() + ",");
                }
                csv.write("\n");
            }

            csv.close();
        } catch (IOException e) {
            System.out.println("Error " + e);
        }
    }

    public static Object[][] readFromCSV() throws IOException {
        try ( CSVReader reader = new CSVReader(new BufferedReader(
                new FileReader("C:/CSET4250FinalProjectStudentGradingApplication/Grades.csv")));) {
            List<String[]> lines = reader.readAll();
            return lines.toArray(Object[][]::new);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        AddNewStudentButton = new javax.swing.JButton();
        AddAssignmentButton = new javax.swing.JButton();
        GradesLabel = new javax.swing.JLabel();
        DeleteAsignmentButton = new javax.swing.JButton();
        DeleteStudentButton = new javax.swing.JButton();
        Filter_jlabel = new javax.swing.JLabel();
        Filter_jTextField1 = new javax.swing.JTextField();
        SaveButton = new javax.swing.JButton();
        AddCourseButton = new javax.swing.JButton();
        RemoveRowButton = new javax.swing.JButton();
        ViewGradesButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        DeleteCourseButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(1245, 720));
        setMinimumSize(new java.awt.Dimension(1245, 720));
        setPreferredSize(new java.awt.Dimension(1245, 720));
        setResizable(false);
        setSize(new java.awt.Dimension(1245, 720));

        jScrollPane1.setMaximumSize(new java.awt.Dimension(1200, 500));
        jScrollPane1.setMinimumSize(new java.awt.Dimension(1200, 500));
        jScrollPane1.setPreferredSize(new java.awt.Dimension(1200, 500));

        jTable1.setAutoCreateRowSorter(true);
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"CSET4250", "Test", "Test 1", "bbahls",  new Double(50.0),  new Double(100.0)},
                {"CSET4250", "Homework", "Homework 1", "bcook",  new Double(60.0),  new Double(100.0)},
                {"ENGT4050", "Homework", "hmwrk 1", "zarule",  new Double(100.0),  new Double(100.0)},
                {"ENGT4050", "Test", "Test_1", "trober",  new Double(100.0),  new Double(100.0)}
            },
            new String [] {
                "Class", "Assignment Type", "Assignment Title", "Student", "Points", "Available Points"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.Double.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTable1.setMaximumSize(new java.awt.Dimension(1200, 500));
        jTable1.setMinimumSize(new java.awt.Dimension(1200, 500));
        jTable1.setName(""); // NOI18N
        jTable1.setPreferredSize(new java.awt.Dimension(1200, 500));
        jTable1.setShowGrid(true);
        jScrollPane1.setViewportView(jTable1);
        jTable1.getAccessibleContext().setAccessibleName("");
        jTable1.getAccessibleContext().setAccessibleDescription("");

        AddNewStudentButton.setText("Add New or Existing Student to Course");
        AddNewStudentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddNewStudentButtonActionPerformed(evt);
            }
        });

        AddAssignmentButton.setText("Add Assignment");
        AddAssignmentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddAssignmentButtonActionPerformed(evt);
            }
        });

        GradesLabel.setFont(new java.awt.Font("Segoe UI", 0, 48)); // NOI18N
        GradesLabel.setText("Grades");
        GradesLabel.setAlignmentX(0.5F);

        DeleteAsignmentButton.setText("Delete Assignment");
        DeleteAsignmentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteAsignmentButtonActionPerformed(evt);
            }
        });

        DeleteStudentButton.setText("Delete Student");
        DeleteStudentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteStudentButtonActionPerformed(evt);
            }
        });

        Filter_jlabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        Filter_jlabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Filter_jlabel.setText("<html>Filter the table by Class or Assignment Type or Assignment Title or Student:<br\\> (Filter bar is case insensitive. It does not utilize \"contains\" logic)</html>");
        Filter_jlabel.setAlignmentX(0.5F);
        Filter_jlabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        Filter_jlabel.setIconTextGap(20);

        Filter_jTextField1.setToolTipText("Filter the table by type, title, or student");
        Filter_jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Filter_jTextField1ActionPerformed(evt);
            }
        });

        SaveButton.setText("Save");
        SaveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveButtonActionPerformed(evt);
            }
        });

        AddCourseButton.setText("Add Course");
        AddCourseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddCourseButtonActionPerformed(evt);
            }
        });

        RemoveRowButton.setText("Remove Selected Row");
        RemoveRowButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RemoveRowButtonActionPerformed(evt);
            }
        });

        ViewGradesButton.setText("View Student Grades");
        ViewGradesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ViewGradesButtonActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("<html><center>Edit the \"Points\" and \"Available Points\" columns directly in the table. \"Points\"  can not be a higher <br> value than \"Available Points\". <u>And be sure to click the Save button before closing this window! ---></u></center></html>");
        jLabel1.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        DeleteCourseButton.setText("Delete Course");
        DeleteCourseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteCourseButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(AddNewStudentButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(DeleteStudentButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(AddAssignmentButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(DeleteAsignmentButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(AddCourseButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(DeleteCourseButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(RemoveRowButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ViewGradesButton)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(GradesLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 941, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(SaveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(Filter_jlabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Filter_jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 732, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap(39, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(GradesLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SaveButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AddNewStudentButton)
                    .addComponent(DeleteStudentButton)
                    .addComponent(AddAssignmentButton)
                    .addComponent(DeleteAsignmentButton)
                    .addComponent(AddCourseButton)
                    .addComponent(DeleteCourseButton)
                    .addComponent(RemoveRowButton)
                    .addComponent(ViewGradesButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Filter_jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Filter_jlabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(51, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    @SuppressWarnings("UseOfObsoleteCollectionType")
    private void NewInitComponents() throws IOException {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        AddNewStudentButton = new javax.swing.JButton();
        AddAssignmentButton = new javax.swing.JButton();
        GradesLabel = new javax.swing.JLabel();
        DeleteAsignmentButton = new javax.swing.JButton();
        DeleteStudentButton = new javax.swing.JButton();
        Filter_jlabel = new javax.swing.JLabel();
        Filter_jTextField1 = new javax.swing.JTextField();
        SaveButton = new javax.swing.JButton();
        AddCourseButton = new javax.swing.JButton();
        RemoveRowButton = new javax.swing.JButton();
        ViewGradesButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        DeleteCourseButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(1245, 720));
        setMinimumSize(new java.awt.Dimension(1245, 720));
        setPreferredSize(new java.awt.Dimension(1245, 720));
        setResizable(false);
        setSize(new java.awt.Dimension(1245, 720));

        jScrollPane1.setMaximumSize(new java.awt.Dimension(1200, 500));
        jScrollPane1.setMinimumSize(new java.awt.Dimension(1200, 500));
        jScrollPane1.setPreferredSize(new java.awt.Dimension(1200, 500));

        jTable1.setAutoCreateRowSorter(true);

        data = Arrays.copyOfRange(readFromCSV(), 1, readFromCSV().length);

        model = new DefaultTableModel(data, new Object[]{"Class", "Assignment Type", "Assignment Title", "Student", "Points", "Available Points"});

        jTable1.setModel(model);

        jTable1.setMaximumSize(new java.awt.Dimension(1200, 500));
        jTable1.setMinimumSize(new java.awt.Dimension(1200, 500));
        jTable1.setName(""); // NOI18N
        jTable1.setPreferredSize(new java.awt.Dimension(1200, 500));
        jTable1.setShowGrid(true);
        jScrollPane1.setViewportView(jTable1);
        jTable1.getAccessibleContext().setAccessibleName("");
        jTable1.getAccessibleContext().setAccessibleDescription("");

        AddNewStudentButton.setText("Add New or Existing Student to Course");
        AddNewStudentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddNewStudentButtonActionPerformed(evt);
            }
        });

        AddAssignmentButton.setText("Add Assignment");
        AddAssignmentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddAssignmentButtonActionPerformed(evt);
            }
        });

        GradesLabel.setFont(new java.awt.Font("Segoe UI", 0, 48)); // NOI18N
        GradesLabel.setText("Grades");
        GradesLabel.setAlignmentX(0.5F);

        DeleteAsignmentButton.setText("Delete Assignment");
        DeleteAsignmentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteAsignmentButtonActionPerformed(evt);
            }
        });

        DeleteStudentButton.setText("Delete Student");
        DeleteStudentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteStudentButtonActionPerformed(evt);
            }
        });

        Filter_jlabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        Filter_jlabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Filter_jlabel.setText("<html>Filter the table by Class or Assignment Type or Assignment Title or Student:<br\\> (Filter bar is case insensitive. It does not utilize \"contains\" logic)</html>");
        Filter_jlabel.setAlignmentX(0.5F);
        Filter_jlabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        Filter_jlabel.setIconTextGap(20);

        Filter_jTextField1.setToolTipText("Filter the table by type, title, or student");
        Filter_jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Filter_jTextField1ActionPerformed(evt);
            }
        });

        SaveButton.setText("Save");
        SaveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveButtonActionPerformed(evt);
            }
        });

        AddCourseButton.setText("Add Course");
        AddCourseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddCourseButtonActionPerformed(evt);
            }
        });

        RemoveRowButton.setText("Remove Selected Row");
        RemoveRowButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RemoveRowButtonActionPerformed(evt);
            }
        });

        ViewGradesButton.setText("View Student Grades");
        ViewGradesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ViewGradesButtonActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("<html><center>Edit the \"Points\" and \"Available Points\" columns directly in the table. \"Points\"  can not be a higher <br> value than \"Available Points\". <u>And be sure to click the Save button before closing this window! ---></u></center></html>");
        jLabel1.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        DeleteCourseButton.setText("Delete Course");
        DeleteCourseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteCourseButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(AddNewStudentButton)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(DeleteStudentButton)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(AddAssignmentButton)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(DeleteAsignmentButton)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(AddCourseButton)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(DeleteCourseButton)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(RemoveRowButton)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(ViewGradesButton)
                                                .addGap(0, 0, Short.MAX_VALUE))
                                        .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addComponent(GradesLabel)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 941, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(SaveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addComponent(Filter_jlabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(Filter_jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 732, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                .addContainerGap(39, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(GradesLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(SaveButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(AddNewStudentButton)
                                        .addComponent(DeleteStudentButton)
                                        .addComponent(AddAssignmentButton)
                                        .addComponent(DeleteAsignmentButton)
                                        .addComponent(AddCourseButton)
                                        .addComponent(DeleteCourseButton)
                                        .addComponent(RemoveRowButton)
                                        .addComponent(ViewGradesButton))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(Filter_jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(Filter_jlabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(51, Short.MAX_VALUE))
        );

        pack();
        this.setLocationRelativeTo(null);
    }

    public static DefaultTableModel getjTable1Model() {
        return model;
    }

    public static String[] getRowForGradesView(int row) {

        double pointsEarned = Double.parseDouble(model.getValueAt(row, 5).toString());
        double pointsAvailable = Double.parseDouble(model.getValueAt(row, 6).toString());
        double gradePercentage = (pointsEarned / pointsAvailable) * 100;
        DecimalFormat df = new DecimalFormat("0.00");
        df.setRoundingMode(RoundingMode.HALF_UP);

        String[] result = new String[6];

        for (int i = 0; i < 6; i++) {
            if (i <= 3) {
                result[i] = model.getValueAt(row, i).toString();
            } else if (i == 4) {
                result[i] = df.format(gradePercentage);
            } else if (i == 5) {
                if (0 <= gradePercentage && gradePercentage <= 60) {
                    result[i] = "F";
                } else if (60 <= gradePercentage && gradePercentage <= 62) {
                    result[i] = "D-";
                } else if (63 <= gradePercentage && gradePercentage <= 68) {
                    result[i] = "D";
                } else if (67 <= gradePercentage && gradePercentage <= 69) {
                    result[i] = "D+";
                } else if (70 <= gradePercentage && gradePercentage <= 72) {
                    result[i] = "C-";
                } else if (73 <= gradePercentage && gradePercentage <= 76) {
                    result[i] = "C";
                } else if (77 <= gradePercentage && gradePercentage <= 79) {
                    result[i] = "C+";
                } else if (80 <= gradePercentage && gradePercentage <= 82) {
                    result[i] = "B-";
                } else if (83 <= gradePercentage && gradePercentage <= 86) {
                    result[i] = "B";
                } else if (87 <= gradePercentage && gradePercentage <= 89) {
                    result[i] = "B+";
                } else if (90 <= gradePercentage && gradePercentage <= 92) {
                    result[i] = "A-";
                } else if (93 <= gradePercentage && gradePercentage <= 100) {
                    result[i] = "A";
                }
            }
        }

        return result;
    }

//    public static HashSet getStudentSet() {
//        return StudentSet;
//    }
//
//    public static Map getStudentCourseMap() {
//        return StudentCourseMap;
//    }
//
//    public static Map getCourseAssignmentMap() {
//        return CourseAssigmentMap;
//    }
    public static HashSet<String> getInitialStudents() {
        return InitialStudents;
    }

    public static HashSet getInitialCourses() {
        return InitialCourses;
    }

    public static HashSet getInitialAssignments() {
        return InitialAssignments;
    }

    private void AddNewStudentButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddNewStudentButtonActionPerformed
        new AddNewStudentWindow().setVisible(true);
        int initialModelRowCount = model.getRowCount();
        InitialStudents = new HashSet<String>();
        InitialCourses = new HashSet<String>();
        for (int i = 0; i < initialModelRowCount; i++) {
            InitialStudents.add(model.getValueAt(i, 3).toString());
            InitialCourses.add(model.getValueAt(i, 0).toString());
        }
    }//GEN-LAST:event_AddNewStudentButtonActionPerformed

    private void AddAssignmentButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddAssignmentButtonActionPerformed
        new AddAssignmentWindow().setVisible(true);
        int initialModelRowCount = model.getRowCount();
        InitialCourses = new HashSet<String>();

        for (int i = 0; i < initialModelRowCount; i++) {
            InitialCourses.add(model.getValueAt(i, 0).toString());
        }
    }//GEN-LAST:event_AddAssignmentButtonActionPerformed

    private void DeleteAsignmentButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteAsignmentButtonActionPerformed
        new DeleteAssignmentWindow().setVisible(true);
        int initialModelRowCount = model.getRowCount();
        InitialCourses = new HashSet<String>();
        InitialAssignments = new HashSet<String>();

        for (int i = 0; i < initialModelRowCount; i++) {
            InitialCourses.add(model.getValueAt(i, 0).toString());
            InitialAssignments.add(model.getValueAt(i, 2).toString());
        }
    }//GEN-LAST:event_DeleteAsignmentButtonActionPerformed

    private void DeleteStudentButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteStudentButtonActionPerformed
        new DeleteStudentWindow().setVisible(true);
        int initialModelRowCount = model.getRowCount();
        InitialStudents = new HashSet<String>();

        for (int i = 0; i < initialModelRowCount; i++) {
            InitialStudents.add(model.getValueAt(i, 3).toString());
        }
        System.out.println(InitialStudents);
    }//GEN-LAST:event_DeleteStudentButtonActionPerformed

    private void Filter_jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Filter_jTextField1ActionPerformed
        TableRowSorter<TableModel> sorter
                = new TableRowSorter<TableModel>(jTable1.getModel());
        jTable1.setRowSorter(sorter);

        String regex = "(?i)^" + Filter_jTextField1.getText();

        List<RowFilter<Object, Object>> rfs
                = new ArrayList<>(2);
        rfs.add(RowFilter.regexFilter(regex, 0));
        rfs.add(RowFilter.regexFilter(regex, 1));
        rfs.add(RowFilter.regexFilter(regex, 2));
        rfs.add(RowFilter.regexFilter(regex, 3));
        RowFilter<Object, Object> af = RowFilter.orFilter(rfs);
        jTable1.setRowSorter(sorter);
        sorter.setRowFilter(af);
    }//GEN-LAST:event_Filter_jTextField1ActionPerformed

    private void SaveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveButtonActionPerformed
        JDialog dialog;
        TableModel model = jTable1.getModel();

        for (int i = 0; i < model.getRowCount(); i++) {
            Double points = Double.valueOf(model.getValueAt(i, 4).toString());
            Double availablePoints = Double.valueOf(model.getValueAt(i, 5).toString());
            if (points < 0 || points > availablePoints) {
                dialog = new JDialog(this, "Invalid Points Value", true);
                JLabel label = new JLabel("The Points value for " + 
                        model.getValueAt(i, 0).toString() + " " + model.getValueAt(i, 1).toString() + " " + 
                        model.getValueAt(i, 2).toString() + " " + model.getValueAt(i, 3).toString() + " is invalid.",  
                        SwingConstants.CENTER);
                label.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
                dialog.add(label, SwingConstants.CENTER);
                dialog.pack();
                dialog.setLocationRelativeTo(this);
                dialog.setVisible(true);
            } else {
                try {
                    try ( FileWriter csv = new FileWriter(new File("C:/CSET4250FinalProjectStudentGradingApplication/Grades.csv"))) {
                        for (int j = 0; j < model.getColumnCount(); j++) {
                            csv.write(model.getColumnName(j) + ",");
                        }

                        csv.write("\n");

                        for (int j = 0; j < model.getRowCount(); j++) {
                            for (int k = 0; k < model.getColumnCount(); k++) {
                                csv.write(model.getValueAt(j, k).toString() + ",");
                            }
                            csv.write("\n");
                        }
                    }
                } catch (IOException e) {
                    dialog = new JDialog(this, "Error", true);
                    JLabel label = new JLabel("Error encountered: " + e, SwingConstants.CENTER);
                    label.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
                    dialog.add(label, SwingConstants.CENTER);
                    dialog.pack();
                    dialog.setLocationRelativeTo(this);
                    dialog.setVisible(true);
                }
            }
        }

        
    }//GEN-LAST:event_SaveButtonActionPerformed

    private void AddCourseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddCourseButtonActionPerformed
        new AddCourseWindow().setVisible(true);
        int initialModelRowCount = model.getRowCount();
        InitialCourses = new HashSet<String>();
        InitialStudents = new HashSet<String>();

        for (int i = 0; i < initialModelRowCount; i++) {
            InitialCourses.add(model.getValueAt(i, 0).toString());
            InitialStudents.add(model.getValueAt(i, 3).toString());
        }
    }//GEN-LAST:event_AddCourseButtonActionPerformed

    private void RemoveRowButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RemoveRowButtonActionPerformed
        if (jTable1.getSelectedRow() != -1) {
            model.removeRow(jTable1.getSelectedRow());
            JOptionPane.showMessageDialog(null, "Selected row deleted successfully");
        }
    }//GEN-LAST:event_RemoveRowButtonActionPerformed

    private void ViewGradesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ViewGradesButtonActionPerformed
        new Grades_SelectionWindow().setVisible(true);
        int initialModelRowCount = model.getRowCount();
        InitialCourses = new HashSet<String>();
        InitialStudents = new HashSet<String>();

        for (int i = 0; i < initialModelRowCount; i++) {
            InitialCourses.add(model.getValueAt(i, 0).toString());
            InitialStudents.add(model.getValueAt(i, 3).toString());
        }
    }//GEN-LAST:event_ViewGradesButtonActionPerformed

    private void DeleteCourseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteCourseButtonActionPerformed
        new DeleteCourseWindow().setVisible(true);
        int initialModelRowCount = model.getRowCount();
        InitialCourses = new HashSet<String>();

        for (int i = 0; i < initialModelRowCount; i++) {
            InitialCourses.add(model.getValueAt(i, 0).toString());
        }
    }//GEN-LAST:event_DeleteCourseButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Create and display the form */
        try {
            MainPage mainPage = new MainPage();
            mainPage.setVisible(true);
        } catch (IOException ex) {
            Logger.getLogger(MainPage.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddAssignmentButton;
    private javax.swing.JButton AddCourseButton;
    private javax.swing.JButton AddNewStudentButton;
    private javax.swing.JButton DeleteAsignmentButton;
    private javax.swing.JButton DeleteCourseButton;
    private javax.swing.JButton DeleteStudentButton;
    private javax.swing.JTextField Filter_jTextField1;
    private javax.swing.JLabel Filter_jlabel;
    private javax.swing.JLabel GradesLabel;
    private javax.swing.JButton RemoveRowButton;
    private javax.swing.JButton SaveButton;
    private javax.swing.JButton ViewGradesButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
    private static DefaultTableModel model;
    private Object[][] data;
    private static HashSet<String> InitialStudents;
    private static HashSet<String> InitialCourses;
    private static HashSet<String> InitialAssignments;

//    private static HashSet<String> StudentSet;
//    private static Map<String, HashSet<String>> StudentCourseMap;
//    private static Map<String, HashSet<String>> CourseAssigmentMap;
}
