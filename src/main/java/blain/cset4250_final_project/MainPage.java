/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package blain.cset4250_final_project;

import java.io.*;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import javax.swing.JTable;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import com.opencsv.CSVReader;
import java.util.HashSet;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author bahls
 */
public class MainPage extends javax.swing.JFrame {

    /**
     * Creates new form MainPage
     *
     * @throws java.io.IOException
     */
    public MainPage() throws IOException {
        NewInitComponents();
    }

    public Object[][] getTableData(JTable table) {
        DefaultTableModel dtm = (DefaultTableModel) table.getModel();
        int nRow = dtm.getRowCount(), nCol = dtm.getColumnCount();
        Object[][] tableData = new Object[nRow][nCol];
        for (int i = 0; i < nRow; i++) {
            for (int j = 0; j < nCol; j++) {
                tableData[i][j] = dtm.getValueAt(i, j);
            }
        }
        return tableData;
    }

    public static void exportToCSV(JTable table, String path) {
        try {
            TableModel model = table.getModel();
            FileWriter csv = new FileWriter(new File(path));

            for (int i = 0; i < model.getColumnCount(); i++) {
                csv.write(model.getColumnName(i) + ",");
            }

            csv.write("\n");

            for (int i = 0; i < model.getRowCount(); i++) {
                for (int j = 0; j < model.getColumnCount(); j++) {
                    csv.write(model.getValueAt(i, j).toString() + ",");
                }
                csv.write("\n");
            }

            csv.close();
        } catch (IOException e) {
            System.out.println("Error " + e);
        }
    }

    public static Object[][] readFromCSV() throws IOException {
        try ( CSVReader reader = new CSVReader(new BufferedReader(
                new FileReader("C:/CSET4250FinalProjectStudentGradingApplication/Grades.csv")));) {
            List<String[]> lines = reader.readAll();
            return lines.toArray(Object[][]::new);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        AddStudentButton = new javax.swing.JButton();
        AddAssignmentButton = new javax.swing.JButton();
        GradesLabel = new javax.swing.JLabel();
        EditAssignmentButton = new javax.swing.JButton();
        DeleteAsignmentButton = new javax.swing.JButton();
        DeleteStudentButton = new javax.swing.JButton();
        Filter_jlabel = new javax.swing.JLabel();
        Filter_jTextField1 = new javax.swing.JTextField();
        SaveButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(1280, 720));
        setMinimumSize(new java.awt.Dimension(1280, 720));
        setPreferredSize(new java.awt.Dimension(1280, 720));
        setSize(new java.awt.Dimension(1280, 720));

        jTable1.setAutoCreateRowSorter(true);
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"CSET4250", "Test", "Test 1", "bbahls", "F",  new Double(50.0),  new Double(100.0)},
                {"CSET4250", "Homework", "Homework 1", "bcook", "D-",  new Double(60.0),  new Double(100.0)},
                {"ENGT4050", "Homework", "hmwrk 1", "zarule", "A",  new Double(100.0),  new Double(100.0)},
                {"ENGT4050", "Test", "Test_1", "trober", "A",  new Double(100.0),  new Double(100.0)}
            },
            new String [] {
                "Class", "Assignment Type", "Assignment Title", "Student", "Grade", "Points", "Available Points"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.Double.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        AddStudentButton.setText("Add Student");
        AddStudentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddStudentButtonActionPerformed(evt);
            }
        });

        AddAssignmentButton.setText("Add Assignment");
        AddAssignmentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddAssignmentButtonActionPerformed(evt);
            }
        });

        GradesLabel.setFont(new java.awt.Font("Segoe UI", 0, 48)); // NOI18N
        GradesLabel.setText("Grades");
        GradesLabel.setAlignmentX(0.5F);

        EditAssignmentButton.setText("prnt tbl 2 cnsl");
        EditAssignmentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditAssignmentButtonActionPerformed(evt);
            }
        });

        DeleteAsignmentButton.setText("Delete Assignment");
        DeleteAsignmentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteAsignmentButtonActionPerformed(evt);
            }
        });

        DeleteStudentButton.setText("Delete Student");
        DeleteStudentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteStudentButtonActionPerformed(evt);
            }
        });

        Filter_jlabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        Filter_jlabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Filter_jlabel.setText("<html>Filter the table by Class or Assignment Type or Assignment Title or Student:<br\\> (Filter bar is case insensitive. It does not utilize \"contains\" logic)</html>");
        Filter_jlabel.setAlignmentX(0.5F);
        Filter_jlabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        Filter_jlabel.setIconTextGap(20);

        Filter_jTextField1.setToolTipText("Filter the table by type, title, or student");
        Filter_jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Filter_jTextField1ActionPerformed(evt);
            }
        });

        SaveButton.setText("Save");
        SaveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(GradesLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(Filter_jlabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Filter_jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 879, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(AddStudentButton)
                                .addGap(18, 18, 18)
                                .addComponent(DeleteStudentButton)
                                .addGap(18, 18, 18)
                                .addComponent(AddAssignmentButton)
                                .addGap(18, 18, 18)
                                .addComponent(DeleteAsignmentButton)
                                .addGap(18, 18, 18)
                                .addComponent(EditAssignmentButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(SaveButton))))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(GradesLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AddAssignmentButton)
                    .addComponent(AddStudentButton)
                    .addComponent(DeleteStudentButton)
                    .addComponent(EditAssignmentButton)
                    .addComponent(DeleteAsignmentButton)
                    .addComponent(SaveButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Filter_jlabel)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Filter_jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 726, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    @SuppressWarnings("UseOfObsoleteCollectionType")
    private void NewInitComponents() throws IOException {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        AddStudentButton = new javax.swing.JButton();
        AddAssignmentButton = new javax.swing.JButton();
        GradesLabel = new javax.swing.JLabel();
        EditAssignmentButton = new javax.swing.JButton();
        DeleteAsignmentButton = new javax.swing.JButton();
        DeleteStudentButton = new javax.swing.JButton();
        Filter_jlabel = new javax.swing.JLabel();
        Filter_jTextField1 = new javax.swing.JTextField();
        SaveButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(1280, 720));
        setMinimumSize(new java.awt.Dimension(1280, 720));
        setPreferredSize(new java.awt.Dimension(1280, 720));
        setSize(new java.awt.Dimension(1280, 720));

        jTable1.setAutoCreateRowSorter(true);

        data = Arrays.copyOfRange(readFromCSV(), 1, readFromCSV().length);

        model = new DefaultTableModel(data, new Object[]{"Class", "Assignment Type", "Assignment Title", "Student", "Grade", "Points", "Available Points"});

        jTable1.setModel(model);

//        int initialModelRowCount = model.getRowCount();
//        StudentCourseMap = new HashMap<String, HashSet<String>>();
//        CourseAssigmentMap = new HashMap<String, HashSet<String>>();
//        for (int i = 0; i < initialModelRowCount; i++) {
//            //StudentSet.add(model.getValueAt(i, 3).toString());
//            String username = model.getValueAt(i, 3).toString();
//            String course = model.getValueAt(i, 0).toString();
//            String assigment = model.getValueAt(i, 2).toString();
//            StudentCourseMap.putIfAbsent(username, new HashSet());
//            StudentCourseMap.get(username).add(course);
//            CourseAssigmentMap.putIfAbsent(course, new HashSet());
//            CourseAssigmentMap.get(course).add(assigment);
//        }
        //StudentSet = new HashSet(StudentList);
        //StudentCourseList = new ArrayList<String>();
//        Iterator itr = StudentSet.iterator();
//  
//        // check element is present or not. if not loop will
//        // break.
//        while (itr.hasNext()) {
//            StudentCourseMap.computeIfAbsent(itr.next().toString(), k -> new HashSet()).add();
//            System.out.println(itr.next());
//        }
        jScrollPane1.setViewportView(jTable1);

        AddStudentButton.setText("Add Student");
        AddStudentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddStudentButtonActionPerformed(evt);
            }
        });

        AddAssignmentButton.setText("Add Assignment");
        AddAssignmentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddAssignmentButtonActionPerformed(evt);
            }
        });

        GradesLabel.setFont(new java.awt.Font("Segoe UI", 0, 48)); // NOI18N
        GradesLabel.setText("Grades");
        GradesLabel.setAlignmentX(0.5F);

        EditAssignmentButton.setText("prnt tbl 2 cnsl");
        EditAssignmentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditAssignmentButtonActionPerformed(evt);
            }
        });

        DeleteAsignmentButton.setText("Delete Assignment");
        DeleteAsignmentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteAsignmentButtonActionPerformed(evt);
            }
        });

        DeleteStudentButton.setText("Delete Student");
        DeleteStudentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteStudentButtonActionPerformed(evt);
            }
        });

        Filter_jlabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        Filter_jlabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Filter_jlabel.setText("<html>Filter the table by Class or Assignment Type or Assignment Title or Student:<br\\> (Filter bar is case insensitive. It does not utilize \"contains\" logic)</html>");
        Filter_jlabel.setAlignmentX(0.5F);
        Filter_jlabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        Filter_jlabel.setIconTextGap(20);

        Filter_jTextField1.setToolTipText("Filter the table by type, title, or student");
        Filter_jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Filter_jTextField1ActionPerformed(evt);
            }
        });

        SaveButton.setText("Save");
        SaveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(GradesLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(Filter_jlabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Filter_jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 879, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(AddStudentButton)
                                .addGap(18, 18, 18)
                                .addComponent(DeleteStudentButton)
                                .addGap(18, 18, 18)
                                .addComponent(AddAssignmentButton)
                                .addGap(18, 18, 18)
                                .addComponent(DeleteAsignmentButton)
                                .addGap(18, 18, 18)
                                .addComponent(EditAssignmentButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(SaveButton))))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(GradesLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AddAssignmentButton)
                    .addComponent(AddStudentButton)
                    .addComponent(DeleteStudentButton)
                    .addComponent(EditAssignmentButton)
                    .addComponent(DeleteAsignmentButton)
                    .addComponent(SaveButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Filter_jlabel)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Filter_jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 726, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }

    public static DefaultTableModel getjTable1Model() {
        return model;
    }

//    public static HashSet getStudentSet() {
//        return StudentSet;
//    }
//
//    public static Map getStudentCourseMap() {
//        return StudentCourseMap;
//    }
//
//    public static Map getCourseAssignmentMap() {
//        return CourseAssigmentMap;
//    }
    public static HashSet<String> getInitialStudents() {
        return InitialStudents;
    }

    public static HashSet getInitialCourses() {
        return InitialCourses;
    }

    public static HashSet getInitialAssignments() {
        return InitialAssignments;
    }

    private void AddStudentButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddStudentButtonActionPerformed
        new AddStudentWindow().setVisible(true);
        int initialModelRowCount = model.getRowCount();
        InitialStudents = new HashSet<String>();

        for (int i = 0; i < initialModelRowCount; i++) {
            InitialStudents.add(model.getValueAt(i, 3).toString());
        }
        System.out.println(InitialStudents);
    }//GEN-LAST:event_AddStudentButtonActionPerformed

    private void AddAssignmentButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddAssignmentButtonActionPerformed
        new AddAssignmentWindow().setVisible(true);
        int initialModelRowCount = model.getRowCount();
        InitialCourses = new HashSet<String>();

        for (int i = 0; i < initialModelRowCount; i++) {
            InitialCourses.add(model.getValueAt(i, 0).toString());
        }
    }//GEN-LAST:event_AddAssignmentButtonActionPerformed

    private void EditAssignmentButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditAssignmentButtonActionPerformed

        data = getTableData(jTable1);
        for (int i = 0; i < data.length; i++) {
            for (int j = 0; j < data[i].length; j++) {
                java.lang.System.out.print(data[i][j] + " ");
            }
            java.lang.System.out.println();
        }

        //Arrays.toString(StudentCourseMap.entrySet().toArray());
        //System.out.println(new JSONObject(StudentCourseMap).toString(2));
    }//GEN-LAST:event_EditAssignmentButtonActionPerformed

    private void DeleteAsignmentButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteAsignmentButtonActionPerformed
        new DeleteAssignmentWindow().setVisible(true);
        int initialModelRowCount = model.getRowCount();
        InitialCourses = new HashSet<String>();
        InitialAssignments = new HashSet<String>();

        for (int i = 0; i < initialModelRowCount; i++) {
            InitialCourses.add(model.getValueAt(i, 0).toString());
            InitialAssignments.add(model.getValueAt(i, 2).toString());
        }
    }//GEN-LAST:event_DeleteAsignmentButtonActionPerformed

    private void DeleteStudentButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteStudentButtonActionPerformed
        new DeleteStudentWindow().setVisible(true);
        int initialModelRowCount = model.getRowCount();
        InitialStudents = new HashSet<String>();

        for (int i = 0; i < initialModelRowCount; i++) {
            InitialStudents.add(model.getValueAt(i, 3).toString());
        }
        System.out.println(InitialStudents);
    }//GEN-LAST:event_DeleteStudentButtonActionPerformed

    private void Filter_jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Filter_jTextField1ActionPerformed
        TableRowSorter<TableModel> sorter
                = new TableRowSorter<TableModel>(jTable1.getModel());
        jTable1.setRowSorter(sorter);

        String regex = "(?i)^" + Filter_jTextField1.getText();

        List<RowFilter<Object, Object>> rfs
                = new ArrayList<>(2);
        rfs.add(RowFilter.regexFilter(regex, 0));
        rfs.add(RowFilter.regexFilter(regex, 1));
        rfs.add(RowFilter.regexFilter(regex, 2));
        rfs.add(RowFilter.regexFilter(regex, 3));
        RowFilter<Object, Object> af = RowFilter.orFilter(rfs);
        jTable1.setRowSorter(sorter);
        sorter.setRowFilter(af);
    }//GEN-LAST:event_Filter_jTextField1ActionPerformed

    private void SaveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveButtonActionPerformed
        // TODO add your handling code here:
        try {
            TableModel model = jTable1.getModel();
            try ( FileWriter csv = new FileWriter(new File("C:/CSET4250FinalProjectStudentGradingApplication/Grades.csv"))) {
                for (int i = 0; i < model.getColumnCount(); i++) {
                    csv.write(model.getColumnName(i) + ",");
                }

                csv.write("\n");

                for (int i = 0; i < model.getRowCount(); i++) {
                    for (int j = 0; j < model.getColumnCount(); j++) {
                        csv.write(model.getValueAt(i, j).toString() + ",");
                    }
                    csv.write("\n");
                }
            }
        } catch (IOException e) {
            System.out.println("Error " + e);
        }
    }//GEN-LAST:event_SaveButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
            try {
                MainPage mainPage = new MainPage();
                mainPage.setVisible(true);
            } catch (IOException ex) {
                Logger.getLogger(MainPage.class.getName()).log(Level.SEVERE, null, ex);
            }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddAssignmentButton;
    private javax.swing.JButton AddStudentButton;
    private javax.swing.JButton DeleteAsignmentButton;
    private javax.swing.JButton DeleteStudentButton;
    private javax.swing.JButton EditAssignmentButton;
    private javax.swing.JTextField Filter_jTextField1;
    private javax.swing.JLabel Filter_jlabel;
    private javax.swing.JLabel GradesLabel;
    private javax.swing.JButton SaveButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
    private Object[][] data;
    private static DefaultTableModel model;
    private static HashSet<String> InitialStudents;
    private static HashSet<String> InitialCourses;
    private static HashSet<String> InitialAssignments;

//    private static HashSet<String> StudentSet;
//    private static Map<String, HashSet<String>> StudentCourseMap;
//    private static Map<String, HashSet<String>> CourseAssigmentMap;
}
